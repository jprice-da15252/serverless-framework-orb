# How to author commands: https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
description: >
  Install and authenticate with the Serverless CLI.
parameters:
  provider:
    type: enum
    enum: ["", "AWS", "azure", "tencent", "google", "knative", "alibaba", "cloudflare", "fn", "kubeless", "openwhisk", "spotinist"]
    default: "AWS"
  org-name:
    type: string
    description: Connect to serverless.com dashboard. Provide the org name for this app.
    default: ""
  app-name:
    type: string
    description: Connect to serverless.com dashboard. Provide the name of this app.
    default: ""
steps:
  - run:
      name: Provider Check
      command: |
        SLS_ORB_PROVIDER_PARAM="<< parameters.provider >>"
        echo "export SLS_ORB_PROVIDER_PARAM=$SLS_ORB_PROVIDER_PARAM" >> "$BASH_ENV"
        ###
        # Helper functions
        ###
        output_Provider_Selected () {
          echo "................................."
          echo " $1 Selected."
          echo "................................."
          echo
        }

        ###
        # Provider check functions
        ###
        AWS_Check () {
          output_Provider_Selected "AWS"
          if [[ $(command -v aws --version >/dev/null 2>&1) == 1 ]]; then
            echo "ERROR: AWS CLI NOT INSTALLED"
            TipMsg_Install_AWS
            exit 1
          fi
          if [[ -z $AWS_ACCESS_KEY_ID || -z $AWS_SECRET_ACCESS_KEY ]]; then
            if [[ ! -f ~/.aws/credentials ]]; then
              echo "ERROR: CREDENTIALS NOT FOUND"
              TipMsg_Install_AWS
              exit 1
            fi
          fi
          TipMsg_Install_AWS () {
            echo "
            ---
            Tip: Install the AWS CLI and authenticate prior to running the Serverless setup command.
            Consider using the AWS CLI orb: https://circleci.com/orbs/registry/orb/circleci/aws-cli#usage-install_aws_cli

            Import the AWS CLI Orb To Your Config:
            ---
              orbs:
                aws-cli: circleci/aws-cli@x.y
            ---

            Run The AWS Setup Command Prior To The Serverless Command:
            ---
              steps:
                - aws-cli/setup
                - serverless/setup
            ---
            "
          }
        }
        azure_Check () {
          output_Provider_Selected "Azure"
          if [[ -z $AZURE_SUBSCRIPTION_ID || -z $AZURE_TENANT_ID || -z $AZURE_CLIENT_ID || -z $AZURE_CLIENT_SECRET ]]; then
            echo "
            ---
            ERROR: No Azure credentials provided!

            We were unable to find a value for one or more of the following required environment variables:
            ---
              AZURE_SUBSCRIPTION_ID
              AZURE_TENANT_ID
              AZURE_CLIENT_ID
              AZURE_CLIENT_SECRET
            ---

            The Serverless Framework needs access to Azure account credentials so that it can create and manage resources on your behalf.

            Docs: https://serverless.com/framework/docs/providers/azure/guide/credentials/
            "
            exit 1
          fi
        }
        tencent_Check () {
          output_Provider_Selected "Tencent"
        }
        knative_Check () {
          output_Provider_Selected "Knative"
        }
        alibaba_Check () {
          output_Provider_Selected "Alibaba"
        }
        cloudflare_Check () {
          output_Provider_Selected "Cloudflare"
        }
        fn_Check () {
          output_Provider_Selected "fn"
        }
        kubeless_Check () {
          output_Provider_Selected "Kubeless"
        }
        openwhisk_Check () {
          output_Provider_Selected "OpenWhisk"
        }
        spotinist_Check () {
          output_Provider_Selected "Spotinist"
        }
        ###
        # Call provider based on parameter
        ###
        case $SLS_ORB_PROVIDER_PARAM in
          "AWS")
            AWS_Check
            ;;
          "azure")
            azure_Check
            ;;
          "tencent")
            tencent_Check
            ;;
          "knative")
            knative_Check
            ;;
          "alibaba")
            alibaba_Check
            ;;
          "cloudflare")
            cloudflare_Check
            ;;
          "fn")
            fn_Check
            ;;
          "kubeless")
            kubeless_Check
            ;;
          "openwhisk")
            openwhisk_Check
            ;;
          "spotinist")
            spotinist_Check
            ;;
          *)
            other_Check
        esac
  - run:
      name: Install Serverless CLI
      command: |
        # install
        reset="\033[0m"
        red="\033[31m"
        green="\033[32m"
        yellow="\033[33m"
        cyan="\033[36m"
        white="\033[37m"

        printf "\n$yellow Installing Serverless!$reset\n\n"

        # Detect platform
        if [[ $OSTYPE == "linux-gnu" ]]; then
          PLATFORM="linux"
        elif [[ $OSTYPE == "darwin"* ]]; then
          PLATFORM="macos"
        else
          echo "$red Sorry, there's no serverless binary installer available for this platform. Please open request for it at https://github.com/serverless/serverless/issues.$reset"
          exit 1
        fi

        # Detect architecture
        MACHINE_TYPE=`uname -m`
        if [[ $MACHINE_TYPE == "x86_64" ]]; then
          ARCH='x64'
        else
          echo "$red Sorry, there's no serverless binary installer available for $MACHINE_TYPE architecture. Please open request for it at https://github.com/serverless/serverless/issues.$reset"
          exit 1
        fi

        if [[ -z "${VERSION}" ]]
        then
          # Get latest tag
          TAG=`curl -L --silent https://api.github.com/repos/serverless/serverless/releases/latest 2>&1 | grep 'tag_name' | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+"`
          VERSION=${TAG:1}
        else
          TAG=v$VERSION
        fi

        BINARY_URL="https://github.com/serverless/serverless/releases/download/$TAG/serverless-$PLATFORM-$ARCH"

        # Download binary
        BINARIES_DIR_PATH=$HOME/.serverless/bin
        BINARY_PATH=$BINARIES_DIR_PATH/serverless
        mkdir -p $BINARIES_DIR_PATH
        printf "$yellow Downloading binary for version $VERSION...$reset\n"

        version_error_msg (){
          echo "Could not download binary. Is the version correct?"
        }
        trap version_error_msg ERR
        curl --fail -L -o $BINARY_PATH.tmp $BINARY_URL
        trap - ERR
        mv $BINARY_PATH.tmp $BINARY_PATH
        chmod +x $BINARY_PATH

        # Ensure aliases
        ln -sf serverless $BINARIES_DIR_PATH/sls

        # Add to $PATH
        SOURCE_STR="# Added by serverless binary installer\nexport PATH=\"\$HOME/.serverless/bin:\$PATH\"\n"
        add_to_path () {
          command printf "\n$SOURCE_STR" >> "$1"
          printf "\n$yellow Added the following to $1:\n\n$SOURCE_STR$reset"
        }
        SHELLTYPE="$(basename "/$SHELL")"
        if [[ $SHELLTYPE = "fish" ]]; then
          command fish -c 'set -U fish_user_paths $fish_user_paths ~/.serverless/bin'
          printf "\n$yellow Added ~/.serverless/bin to fish_user_paths universal variable$reset."
        elif [[ $SHELLTYPE = "zsh" ]]; then
          SHELL_CONFIG=$HOME/.zshrc
          if [ ! -r $SHELL_CONFIG ] || (! `grep -q '.serverless/bin' $SHELL_CONFIG`); then
            add_to_path $SHELL_CONFIG
          fi
        else
          SHELL_CONFIG=$HOME/.bashrc
          if [ ! -r $SHELL_CONFIG ] || (! `grep -q '.serverless/bin' $SHELL_CONFIG`); then
            add_to_path $SHELL_CONFIG
          fi
          SHELL_CONFIG=$HOME/.bash_profile
          if [[ -r $SHELL_CONFIG ]]; then
            if [[ ! $(grep -q '.serverless/bin' $SHELL_CONFIG) ]]; then
              add_to_path $SHELL_CONFIG
            fi
          else
            SHELL_CONFIG=$HOME/.bash_login
            if [[ -r $SHELL_CONFIG ]]; then
              if [[ ! $(grep -q '.serverless/bin' $SHELL_CONFIG) ]]; then
                add_to_path $SHELL_CONFIG
              fi
            else
              SHELL_CONFIG=$HOME/.profile
              if [ ! -r $SHELL_CONFIG ] || (! `grep -q '.serverless/bin' $SHELL_CONFIG`); then
                add_to_path $SHELL_CONFIG
              fi
            fi
          fi
        fi

        $HOME/.serverless/bin/serverless binary-postinstall
        
        # configure environment
        echo "export PATH=$HOME/.serverless/bin:$PATH" >> "$BASH_ENV"
        source "$BASH_ENV"
        # Check for Serverless key
        if [ -z "$SERVERLESS_ACCESS_KEY" ]; then
          echo "Error: The environment variable SERVERLESS_ACCESS_KEY is empty.
            Please create your serverless dashboard access key and add it to this project as a project environment vairable
            or via contexts.
            https://serverless.com/framework/docs/dashboard/cicd/running-in-your-own-cicd#configure-environment-variables"
        else
          SERVERLESS_ORB_ORG_NAME="<< parameters.org-name >>"
          SERVERLESS_ORB_APP_NAME="<< parameters.app-name >>"
          if [[ -n "$SERVERLESS_ORB_ORG_NAME" && -n "$SERVERLESS_ORB_APP_NAME" ]]; then
            # Autoamtically connect to service (or create one) if org name and app name are present.
            echo y | serverless --org "$SERVERLESS_ORB_ORG_NAME" --app "$SERVERLESS_ORB_APP_NAME"
          else
            echo "WARNING: No Org name or App name detected. NOT connected to a service."
          fi
        fi
